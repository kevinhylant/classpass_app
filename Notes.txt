How To Build a RESTful API


Resources do not exist in isolation, but have relationships to other other resources. Sometimes these relationships exist between the mapped objects in the application data model as well, sometimes they are specific to the RESTful resources.

One of the principles of the RESTful architecture style is that these relationships are expressed by hyperlinks to the representation of a resource.

In our resource model, we interpret any object with an “href” attribute as a hyperlink. The value of the href attribute contains an absolute URL that can be retrieved with GET. Using GET on a such a URL is guaranteed to be side-effect free.

Two types of hyperlinks are normally used:

Using “link” objects. This is a special object of type “link” with “href” and a “rel” attributes. The “rel” attribute value identifies the semantics of the relationship. The link object is borrowed from HTML.
Using any object with a “href” attribute. The object type defines the semantics of the relationship. I’ll call these “object links,” not to be confused with the “link objects” above.



!vm
id: 123
href: /api/vms/123
link:
  rel: collection/nics
  href: /api/vms/123/nics
cluster:
  href: /api/clusters/456

(cluser is an "object link")


The “link” object is used with rel=”collection/nics” to refer to a sub-collection to the VM holding the virtual network interfaces. The cluster link instead points to the cluster containing this VM by means of a “cluster” object.

Note that the VM itself has a href attribute as well. This is called a “self” link, and it is a convention for a resource to provide such a link. That way, the object can later be easily re-retrieved or updated without keeping external state. 


There are two types of ways to express a relationship in your JSON, as a "link object" and an "object link". Object links favor compactness while Link Objects are easier to understand without knowledge of the underlying models. 

Relationship         Semantics
collection/{name} --> Link to a related collection {name}.
resource/{name}   --> Link to a related resource {name}.
form/{name}       --> Link to a related form {name}.
